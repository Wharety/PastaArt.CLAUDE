name: Deploy to VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        python -c "import requests; print('‚úÖ Requests module available')"
        python -c "import flask; print('‚úÖ Flask module available')"
        python -c "import app; print('‚úÖ App imports successfully')"
        python -c "from app import create_app; app = create_app(); print('‚úÖ App created successfully')"
        
    - name: Deploy to VPS
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          set -e
          REPO_DIR=~/PastaArt.CLAUDE
          
          # Gerar ASSET_VERSION √∫nica baseada no timestamp e commit
          ASSET_VERSION="$(date +%Y%m%d-%H%M%S)-$(echo ${{ github.sha }} | cut -c1-7)"
          echo "üîÑ Gerando ASSET_VERSION: $ASSET_VERSION"
          
          if [ ! -d "$REPO_DIR/.git" ]; then
            rm -rf "$REPO_DIR"
            git clone https://github.com/Wharety/PastaArt.CLAUDE.git "$REPO_DIR"
          else
            cd "$REPO_DIR"
            git fetch --all
            git reset --hard origin/main
            git clean -fd
          fi
          
          cd "$REPO_DIR"
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          . venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          # Atualizar ASSET_VERSION no unit file automaticamente
          echo "üìù Atualizando ASSET_VERSION no servi√ßo..."
          sudo sed -i "s/ASSET_VERSION=[^ ]*/ASSET_VERSION=$ASSET_VERSION/" /etc/systemd/system/pasta-art.service
          
          # Se n√£o existir, adicionar na linha do Environment
          if ! grep -q "ASSET_VERSION" /etc/systemd/system/pasta-art.service; then
            sudo sed -i 's/Environment=FLASK_ENV=production PYTHONUNBUFFERED=1/Environment=FLASK_ENV=production PYTHONUNBUFFERED=1 ASSET_VERSION='"$ASSET_VERSION"'/' /etc/systemd/system/pasta-art.service
          fi
          
          sudo systemctl daemon-reload
          sudo systemctl restart pasta-art
          echo "‚úÖ Deploy completed successfully! ASSET_VERSION: $ASSET_VERSION"
          
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ Deploy successful!"
        else
          echo "‚ùå Deploy failed!"
        fi
